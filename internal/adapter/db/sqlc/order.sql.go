// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    user_id,
    payment_id,
    customer_name,
    total_price,
    total_paid,
    total_return
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, payment_id, customer_name, total_price, total_paid, total_return, receipt_code, created_at, updated_at
`

type CreateOrderParams struct {
	UserID       int64          `json:"user_id"`
	PaymentID    int64          `json:"payment_id"`
	CustomerName string         `json:"customer_name"`
	TotalPrice   pgtype.Numeric `json:"total_price"`
	TotalPaid    pgtype.Numeric `json:"total_paid"`
	TotalReturn  pgtype.Numeric `json:"total_return"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.PaymentID,
		arg.CustomerName,
		arg.TotalPrice,
		arg.TotalPaid,
		arg.TotalReturn,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.CustomerName,
		&i.TotalPrice,
		&i.TotalPaid,
		&i.TotalReturn,
		&i.ReceiptCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, payment_id, customer_name, total_price, total_paid, total_return, receipt_code, created_at, updated_at FROM orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.CustomerName,
		&i.TotalPrice,
		&i.TotalPaid,
		&i.TotalReturn,
		&i.ReceiptCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, payment_id, customer_name, total_price, total_paid, total_return, receipt_code, created_at, updated_at FROM orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PaymentID,
			&i.CustomerName,
			&i.TotalPrice,
			&i.TotalPaid,
			&i.TotalReturn,
			&i.ReceiptCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
