// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    category_id, name, image, price, stock
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, category_id, sku, name, stock, price, image, created_at, updated_at
`

type CreateProductParams struct {
	CategoryID int64          `json:"category_id"`
	Name       string         `json:"name"`
	Image      pgtype.Text    `json:"image"`
	Price      pgtype.Numeric `json:"price"`
	Stock      int64          `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.CategoryID,
		arg.Name,
		arg.Image,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Sku,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, category_id, sku, name, stock, price, image, created_at, updated_at FROM products
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Sku,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, category_id, sku, name, stock, price, image, created_at, updated_at FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Sku,
			&i.Name,
			&i.Stock,
			&i.Price,
			&i.Image,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    category_id = COALESCE($2, category_id),
    name = COALESCE($3, name),
    image = COALESCE($4, image),
    price = COALESCE($5, price),
    stock = COALESCE($6, stock)
WHERE id = $1
RETURNING id, category_id, sku, name, stock, price, image, created_at, updated_at
`

type UpdateProductParams struct {
	ID         int64          `json:"id"`
	CategoryID pgtype.Int8    `json:"category_id"`
	Name       pgtype.Text    `json:"name"`
	Image      pgtype.Text    `json:"image"`
	Price      pgtype.Numeric `json:"price"`
	Stock      pgtype.Int8    `json:"stock"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.CategoryID,
		arg.Name,
		arg.Image,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Sku,
		&i.Name,
		&i.Stock,
		&i.Price,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
