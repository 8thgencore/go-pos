// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UsersRoleEnum string

const (
	UsersRoleEnumAdmin   UsersRoleEnum = "admin"
	UsersRoleEnumCashier UsersRoleEnum = "cashier"
)

func (e *UsersRoleEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRoleEnum(s)
	case string:
		*e = UsersRoleEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRoleEnum: %T", src)
	}
	return nil
}

type NullUsersRoleEnum struct {
	UsersRoleEnum UsersRoleEnum `json:"users_role_enum"`
	Valid         bool          `json:"valid"` // Valid is true if UsersRoleEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRoleEnum) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRoleEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRoleEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRoleEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRoleEnum), nil
}

type Category struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Order struct {
	ID           int64              `json:"id"`
	UserID       int64              `json:"user_id"`
	PaymentID    int64              `json:"payment_id"`
	CustomerName string             `json:"customer_name"`
	TotalPrice   pgtype.Numeric     `json:"total_price"`
	TotalPaid    pgtype.Numeric     `json:"total_paid"`
	TotalReturn  pgtype.Numeric     `json:"total_return"`
	ReceiptCode  pgtype.UUID        `json:"receipt_code"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type OrderProduct struct {
	ID         int64              `json:"id"`
	OrderID    int64              `json:"order_id"`
	ProductID  int64              `json:"product_id"`
	Quantity   int64              `json:"quantity"`
	TotalPrice pgtype.Numeric     `json:"total_price"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type Payment struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	Type      string             `json:"type"`
	Logo      pgtype.Text        `json:"logo"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type Product struct {
	ID         int64              `json:"id"`
	CategoryID int64              `json:"category_id"`
	Sku        pgtype.UUID        `json:"sku"`
	Name       string             `json:"name"`
	Stock      int64              `json:"stock"`
	Price      pgtype.Numeric     `json:"price"`
	Image      pgtype.Text        `json:"image"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	Email     string             `json:"email"`
	Password  string             `json:"password"`
	Role      NullUsersRoleEnum  `json:"role"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}
